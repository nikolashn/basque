#{
	Expected output:
	<address P> = <address P>
	2 = 2
	3 = 3
	29 = 29 = 29
	<address Q> = <address Q>
	<address R> = <address R>
	37 != 101 != 202 != 67 != 68
	11,13,17,19
	11,13,17,19
#}

#{ These variables should be allocated on the stack 
   contiguously based on how the C Basque compiler 
   currently works, however this is not a specification of 
   the Basque programming language, so these tests are not 
   guaranteed to work for future compilers #}

#{ Since memory addresses on the stack grow down, the 
   variables are allocated backwards #}

i64 c3=37; i64 c2=31; i64 c1=29; i64 c0=23;
i64 b3=19; i64 b2=17; i64 b1=13; i64 b0=11;
i64 a3= 7; i64 a2= 5; i64 a1= 3; i64 a0= 2;

i64* c = &c0;
i64* b = &b0;
i64* a = &a0;

i64** arr = &a;

f"%x{[arr]} = %x{a}\n";
f"%i{[a]} = %i{a0}\n";
f"%i{[a,1]} = %i{a1}\n";
f"%i{[arr,2,1]} = %i{[[arr,2],1]} = %i{c1}\n";
f"%x{[arr,1]} = %x{b}\n";

# [b0]; # Error
# [2121]; # Error

f"%x{a} = %x{&[a]}\n";

f"%i{[arr,2,3]} != ";
[arr,2,3] = 101;
f"%i{[arr,2,3]} != ";
[arr,2,3] *= 2;
f"%i{[arr,2,3]} != ";
[arr,2,3] //= 3;
f"%i{[arr,2,3]} != ";
++[arr,2,3];
f"%i{[arr,2,3]}\n";

u64 i = 0;
while i < 4u {
	# 11,13,17,19
	f"%i{[b,i]}";
	if i < 3u, ",";
	else, "\n";
	++i;
}

i64* ptr = b;
while ptr < c {
	# 11,13,17,19
	f"%i{[ptr]}";
	if c - ptr > $[ptr], ",";
	else, "\n";
	ptr += $[ptr];
}

